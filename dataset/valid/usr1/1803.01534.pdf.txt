Path Aggregation Network for Instance Segmentation
Haifang Qin§
Jianping Shi‡
†The Chinese University of Hong Kong
§Peking University
‡SenseTime Research
{sliu, luqi, leojia}@cse.cuhk.edu.hk
qhfpku@pku.edu.cn shijianping@sensetime.com
Abstract
The way that information propagates in neural networks
is of great importance. In this paper, we propose Path Ag-
gregation Network (PANet) aiming at boosting information
ﬂow in proposal-based instance segmentation framework.
Speciﬁcally, we enhance the entire feature hierarchy with
accurate localization signals in lower layers by bottom-up
path augmentation, which shortens the information path be-
tween lower layers and topmost feature. We present adap-
tive feature pooling, which links feature grid and all fea-
ture levels to make useful information in each feature level
propagate directly to following proposal subnetworks. A
complementary branch capturing different views for each
proposal is created to further improve mask prediction.
These improvements are simple to implement, with sub-
tle extra computational overhead. Our PANet reaches the
1st place in the COCO 2017 Challenge Instance Segmenta-
tion task and the 2nd place in Object Detection task without
large-batch training. It is also state-of-the-art on MVD and
Cityscapes.
1. Introduction
Instance segmentation is one of the most important and
challenging tasks. It aims to predict class label and pixel-
wise instance mask to localize varying numbers of instances
presented in images. This task widely beneﬁts autonomous
vehicles, robotics, video surveillance, to name a few.
With the help of deep convolutional neural networks,
several frameworks for instance segmentation, e.g., [21, 33,
3, 38], were proposed where performance grows rapidly
[12]. Mask R-CNN [21] is a simple and effective system
for instance segmentation. Based on Fast/Faster R-CNN
[16, 51], a fully convolutional network (FCN) is used for
mask prediction, along with box regression and classiﬁca-
tion. To achieve high performance, feature pyramid net-
work (FPN) [35] is utilized to extract in-network feature
hierarchy, where a top-down path with lateral connections
is augmented to propagate semantically strong features.
Several newly released datasets [37, 7, 45] make large
room for algorithm improvement. COCO [37] consists of
200k images. Lots of instances with complex spatial lay-
out are captured in each image. Differently, Cityscapes [7]
and MVD [45] provide street scenes with a large number
of trafﬁc participants in each image. Blur, heavy occlusion
and extremely small instances appear in these datasets.
There have been several principles proposed for design-
ing networks in image classiﬁcation that are also effec-
tive for object recognition. For example, shortening infor-
mation path and easing information propagation by clean
residual connection [23, 24] and dense connection [26] are
useful. Increasing the ﬂexibility and diversity of informa-
tion paths by creating parallel paths following the split-
transform-merge strategy [61, 6] is also beneﬁcial.
Our Findings Our research indicates that information
propagation in state-of-the-art Mask R-CNN can be further
improved. Speciﬁcally, features in low levels are helpful for
large instance identiﬁcation. But there is a long path from
low-level structure to topmost features, increasing difﬁculty
to access accurate localization information. Further, each
proposal is predicted based on feature grids pooled from one
feature level, which is assigned heuristically. This process
can be updated since information discarded in other levels
may be helpful for ﬁnal prediction. Finally, mask prediction
is made on a single view, losing the chance to gather more
diverse information.
Our Contributions
Inspired by these principles and ob-
servations, we propose PANet, illustrated in Figure 1, for
instance segmentation.
First,
to shorten information path and enhance fea-
ture pyramid with accurate localization signals existing in
low-levels, bottom-up path augmentation is created.
In
fact, features in low-layers were utilized in the systems of
[44, 42, 13, 46, 35, 5, 31, 14]. But propagating low-level
features to enhance entire feature hierarchy for instance
recognition was not explored.
Second,
to recover broken information path between
each proposal and all feature levels, we develop adaptive
Figure 1. Illustration of our framework. (a) FPN backbone. (b) Bottom-up path augmentation. (c) Adaptive feature pooling. (d) Box
branch. (e) Fully-connected fusion. Note that we omit channel dimension of feature maps in (a) and (b) for brevity.
feature pooling. It is a simple component to aggregate fea-
tures from all feature levels for each proposal, avoiding ar-
bitrarily assigned results. With this operation, cleaner paths
are created compared with those of [4, 62].
Finally, to capture different views of each proposal, we
augment mask prediction with tiny fully-connected (fc) lay-
ers, which possess complementary properties to FCN orig-
inally used by Mask R-CNN. By fusing predictions from
these two views, information diversity increases and masks
with better quality are produced.
The ﬁrst two components are shared by both object de-
tection and instance segmentation, leading to much en-
hanced performance of both tasks.
Experimental Results With PANet, we achieve state-of-
the-art performance on several datasets. With ResNet-50
[23] as the initial network, our PANet tested with a single
scale already outperforms champion of COCO 2016 Chal-
lenge in both object detection [27] and instance segmenta-
tion [33] tasks. Note that these previous results are achieved
by larger models [23, 58] together with multi-scale and hor-
izontal ﬂip testing.
We achieve the 1st place in COCO 2017 Challenge In-
stance Segmentation task and the 2nd place in Object De-
tection task without large-batch training. We also bench-
mark our system on Cityscapes and MVD, which similarly
yields top-ranking results, manifesting that our PANet is a
very practical and top-performing framework. Our code and
models will be made publicly available.
2. Related Work
Instance Segmentation There are mainly two streams of
methods in instance segmentation. The most popular one is
proposal-based. Methods in this stream have a strong con-
nection to object detection. In R-CNN [17], object propos-
als from [60, 68] were fed into the network to extract fea-
tures for classiﬁcation. While Fast/Faster R-CNN [16, 51]
and SPPNet [22] sped up the process by pooling features
from global feature maps. Earlier work [18, 19] took mask
proposals from MCG [1] as input to extract features while
CFM [9], MNC [10] and Hayder et al. [20] merged feature
pooling to network for faster speed. Newer design was to
generate instance masks in networks as proposal [48, 49, 8]
or ﬁnal result [10, 34, 41]. Mask R-CNN [21] is an effective
framework falling in this stream. Our work is built on Mask
R-CNN and improves it from different aspects.
Methods in the other stream are mainly segmentation-
based. They learned specially designed transformation
[3, 33, 38, 59] or instance boundaries [30]. Then instance
masks were decoded from predicted transformation.
In-
stance segmentation by other pipelines also exists. DIN [2]
fused predictions from object detection and semantic seg-
mentation systems. A graphical model was used in [66, 65]
to infer the order of instances. RNN was utilized in [53, 50]
to propose one instance in each time step.
Multi-level Features Features from different layers were
used in image recognition. SharpMask [49], Peng et al. [47]
and LRR [14] fused feature maps for segmentation with
ﬁner details. FCN [44], U-Net [54] and Noh et al. [46] fused
information from lower layers through skip-connections.
Both TDM [56] and FPN [35] augmented a top-down path
with lateral connections for object detection. Different from
TDM, which took the fused feature map with the highest
resolution to pool features, SSD [42], DSSD [13], MS-CNN
[5] and FPN [35] assigned proposals to appropriate feature
levels for inference. We take FPN as a baseline and much
enhance it.
ION [4], Zagoruyko et al. [62], Hypernet [31] and Hy-
percolumn [19] concatenated feature grids from different
layers for better prediction. But a sequence of operations,
i.e., normalization, concatenation and dimension reduction
are needed to get feasible new features. In comparison, our
design is much simpler.
Fusing feature grids from different sources for each pro-
posal was also utilized in [52]. But this method extracted
Figure 2. Illustration of our building block of bottom-up path aug-
mentation.
feature maps on input with different scales and then con-
ducted feature fusion (with the max operation) to improve
feature selection from the input image pyramid. In contrast,
our method aims at utilizing information from all feature
levels in the in-network feature hierarchy with single-scale
input. End-to-end training is enabled.
Larger Context Region Methods of [15, 64, 62] pooled
features for each proposal with a foveal structure to ex-
ploit context information from regions with different res-
olutions. Features pooled from a larger region provide sur-
rounding context. Global pooling was used in PSPNet [67]
and ParseNet [43] to greatly improve quality of semantic
segmentation. Similar trend was observed by Peng et al.
[47] where global convolutionals were utilized. Our mask
prediction branch also supports accessing global informa-
tion. But the technique is completely different.
Our framework is illustrated in Figure 1. Path augmen-
tation and aggregation is conducted for improving perfor-
mance. A bottom-up path is augmented to make low-layer
information easier to propagate. We design adaptive feature
pooling to allow each proposal to access information from
all levels for prediction. A complementary path is added
to the mask-prediction branch. This new structure leads to
decent performance. Similar to FPN, the improvement is
independent of the CNN structure, e.g., [57, 32, 23].
3.1. Bottom-up Path Augmentation
Motivation The insightful point [63] that neurons in high
layers strongly respond to entire objects while other neurons
are more likely to be activated by local texture and patterns
manifests the necessity of augmenting a top-down path to
propagate semantically strong features and enhance all fea-
tures with reasonable classiﬁcation capability in FPN.
Our framework further enhances the localization capa-
bility of the entire feature hierarchy by propagating strong
responses of low-level patterns based on the fact that high
response to edges or instance parts is a strong indicator to
accurately localize instances. To this end, we build a path
with clean lateral connections from the low level to top
ones. Therefore, there is a “shortcut” (dashed green line
in Figure 1), which consists of less than 10 layers, across
these levels. In comparison, the CNN trunk in FPN gives a
long path (dashed red line in Figure 1) passing through even
100+ layers from low layers to the topmost one.
Augmented Bottom-up Structure Our framework ﬁrst
accomplishes bottom-up path augmentation. We follow
FPN to deﬁne that layers producing feature maps with the
same spatial size are in the same network stage. Each fea-
ture level corresponds to one stage. We also take ResNet
[23] as the basic structure and use {P2, P3, P4, P5} to de-
note feature levels generated by FPN. Our augmented path
starts from the lowest level P2 and gradually approaches
P5 as shown in Figure 1(b). From P2 to P5, the spa-
tial size is gradually down-sampled with factor 2. We use
{N2, N3, N4, N5} to denote newly generated feature maps
corresponding to {P2, P3, P4, P5}. Note that N2 is simply
P2, without any processing.
As shown in Figure 2, each building block takes a higher
resolution feature map Ni and a coarser map Pi+1 through
lateral connection and generates the new feature map Ni+1.
Each feature map Ni ﬁrst goes through a 3 × 3 convolu-
tional layer with stride 2 to reduce the spatial size. Then
each element of feature map Pi+1 and the down-sampled
map are added through lateral connection. The fused fea-
ture map is then processed by another 3 × 3 convolutional
layer to generate Ni+1 for following sub-networks. This
is an iterative process and terminates after approaching P5.
In these building blocks, we consistently use channel 256
of feature maps. All convolutional layers are followed by
a ReLU [32]. The feature grid for each proposal is then
pooled from new feature maps, i.e., {N2, N3, N4, N5}.
3.2. Adaptive Feature Pooling
Motivation In FPN [35], proposals are assigned to dif-
ferent feature levels according to the size of proposals. It
makes small proposals assigned to low feature levels and
large proposals to higher ones. Albeit simple and effective,
it still could generate non-optimal results. For example, two
proposals with 10-pixel difference can be assigned to differ-
ent levels. In fact, these two proposals are rather similar.
Further, importance of features may not be strongly cor-
related to the levels they belong to. High-level features are
generated with large receptive ﬁelds and capture richer con-
text information. Allowing small proposals to access these
features better exploits useful context information for pre-
diction. Similarly, low-level features are with many ﬁne de-
tails and high localization accuracy. Making large proposals
access them is obviously beneﬁcial. With these thoughts,
we propose pooling features from all levels for each pro-
posal and fusing them for following prediction. We call this
process adaptive feature pooling.
We now analyze the ratio of features pooled from dif-
ferent levels with adaptive feature pooling. We use max
Figure 3. Ratio of features pooled from different feature levels
with adaptive feature pooling. Each line represents a set of pro-
posals that should be assigned to the same feature level in FPN,
i.e., proposals with similar scales. The horizontal axis denotes the
source of pooled features. It shows that proposals with different
sizes all exploit features from several different levels.
operation to fuse features from different levels, which lets
network select element-wise useful information. We cluster
proposals into four classes based on the levels they were as-
signed to originally in FPN. For each set of proposals, we
calculate the ratio of features selected from different levels.
In notation, levels 1 − 4 represent low-to-high levels. As
shown in Figure 3, the blue line represents small propos-
als that were assigned to level 1 originally in FPN. Surpris-
ingly, nearly 70% of features are from other higher levels.
We also use the yellow line to represent large proposals that
were assigned to level 4 in FPN. Again, 50%+ of the fea-
tures are pooled from other lower levels. This observation
clearly indicates that features in multiple levels together are
helpful for accurate prediction. It is also a strong support of
designing bottom-up path augmentation.
Adaptive Feature Pooling Structure Adaptive feature
pooling is actually simple in implementation and is demon-
strated in Figure 1(c). First, for each proposal, we map them
to different feature levels, as denoted by dark grey regions
in Figure 1(b). Following Mask R-CNN [21], ROIAlign is
used to pool feature grids from each level. Then a fusion
operation (element-wise max or sum) is utilized to fuse fea-
ture grids from different levels.
In following sub-networks, pooled feature grids go
through one parameter layer independently, which is fol-
lowed by the fusion operation, to enable network to adapt
features. For example, there are two fc layers in the box
branch in FPN. We apply the fusion operation after the ﬁrst
layer. Since four consecutive convolutional layers are used
in mask prediction branch in Mask R-CNN, we place fusion
operation between the ﬁrst and second convolutional layers.
Ablation study is given in Section 4.2. The fused feature
grid is used as the feature grid of each proposal for further
prediction, i.e., classiﬁcation, box regression and mask pre-
diction. A detailed illustration of adaptive feature pooling
on box branch is shown by Figure 6 in Appendix.
Figure 4. Mask prediction branch with fully-connected fusion.
Our design focuses on fusing information from in-
network feature hierarchy instead of those from different
feature maps of input image pyramid [52].
It is simpler
compared with the process of [4, 62, 31], where L-2 normal-
ization, concatenation and dimension reduction are needed.
3.3. Fully-connected Fusion
Motivation Fully-connected layers, or MLP, were widely
used in mask prediction in instance segmentation [10, 41,
34] and mask proposal generation [48, 49]. Results of
[8, 33] show that FCN is also competent in predicting pixel-
wise masks for instances. Recently, Mask R-CNN [21] ap-
plied a tiny FCN on the pooled feature grid to predict cor-
responding masks avoiding competition between classes.
We note fc layers yield different properties compared
with FCN where the latter gives prediction at each pixel
based on a local receptive ﬁeld and parameters are shared
at different spatial locations. Contrarily, fc layers are loca-
tion sensitive since predictions at different spatial locations
are achieved by varying sets of parameters. So they have
the ability to adapt to different spatial locations. Also pre-
diction at each spatial location is made with global infor-
mation of the entire proposal. It is helpful to differentiate
instances [48] and recognize separate parts belonging to the
same object. Given properties of fc and convolutional lay-
ers different from each other, we fuse predictions from these
two types of layers for better mask prediction.
Mask Prediction Structure Our component of mask pre-
diction is light-weighted and easy to implement. The mask
branch operates on pooled feature grid for each proposal.
As shown in Figure 4, the main path is a small FCN, which
consists of 4 consecutive convolutional layers and 1 decon-
volutional layer. Each convolutional layer consists of 256
3 × 3 ﬁlters and the deconvolutional layer up-samples fea-
ture with factor 2.
It predicts a binary pixel-wise mask
for each class independently to decouple segmentation and
classiﬁcation, similar to that of Mask R-CNN. We further
create a short path from layer conv3 to a fc layer. There
are two 3× 3 convolutional layers where the second shrinks
channels to half to reduce computational overhead.
A fc layer is used to predict a class-agnostic fore-
Method
Backbone
Table 1. Comparison among PANet, winner of COCO 2016 instance segmentation challenge, and Mask R-CNN on COCO test-dev subset
in terms of Mask AP, where the latter two are baselines.
ground/background mask. It not only is efﬁcient, but also
allows parameters in the fc layer trained with more sam-
ples, leading to better generality. The mask size we use is
28 × 28 so that the fc layer produces a 784 × 1 × 1 vector.
This vector is reshaped to the same spatial size as the mask
predicted by FCN. To obtain the ﬁnal mask prediction, mask
of each class from FCN and foreground/background predic-
tion from fc are added. Using only one fc layer, instead of
multiple of them, for ﬁnal prediction prevents the issue of
collapsing the hidden spatial feature map into a short feature
vector, which loses spatial information.
4. Experiments
We compare our method with state-of-the-arts on chal-
lenging COCO [37], Cityscapes [7] and MVD [45] datasets.
Our results are top ranked in all of them. Comprehensive
ablation study is conducted on the COCO dataset. We also
present our results on COCO 2017 Instance Segmentation
and Object Detection Challenges.
4.1. Implementation Details
We re-implement Mask R-CNN and FPN based on Caffe
[29]. All pre-trained models we use in experiments are pub-
licly available. We adopt image centric training [16]. For
each image, we sample 512 region-of-interests (ROIs) with
positive-to-negative ratio 1 : 3. Weight decay is 0.0001 and
momentum is set to 0.9. Other hyper-parameters slightly
vary according to datasets and we detail them in respective
experiments. Following Mask R-CNN, proposals are from
an independently trained RPN [35, 51] for convenient ab-
lation and fair comparison, i.e., the backbone is not shared
with object detection/instance segmentation.
4.2. Experiments on COCO
Dataset and Metrics COCO [37] dataset is among the
most challenging ones for instance segmentation and object
detection due to the data complexity.
It consists of 115k
images for training and 5k images for validation (new split
of 2017). 20k images are used in test-dev and 20k images
are used as test-challenge. Ground-truth labels of both test-
challenge and test-dev are not publicly available. There are
80 classes with pixel-wise instance mask annotation. We
train our models on train-2017 subset and report results on
val-2017 subset for ablation study. We also report results on
test-dev for comparison.
We follow the standard evaluation metrics,
i.e., AP,
AP50, AP75, APS, APM and APL. The last three measure
performance with respect to objects with different scales.
Since our framework is general to both instance segmenta-
tion and object detection, we also train independent object
detectors. We report mask AP, box ap APbb of an inde-
pendently trained object detector, and box ap APbbM of the
object detection branch trained in the multi-task fashion.
Hyper-parameters We take 16 images in one image
batch for training. The shorter and longer edges of the im-
ages are 800 and 1000, if not specially noted. For instance
segmentation, we train our model with learning rate 0.02 for
120k iterations and 0.002 for another 40k iterations. For ob-
ject detection, we train one object detector without the mask
prediction branch. Object detector is trained for 60k itera-
tions with learning rate 0.02 and another 20k iterations with
learning rate 0.002. These parameters are adopted from
Mask R-CNN and FPN without any ﬁne-tuning.
Instance Segmentation Results We report performance
of our PANet on test-dev for comparison, with and with-
out multi-scale training. As shown in Table 1, our PANet
with ResNet-50 trained on multi-scale images and tested on
single-scale images already outperforms Mask R-CNN and
Champion in 2016, where the latter used larger model en-
sembles and testing tricks [23, 33, 10, 15, 39, 62]. Trained
and tested with image scale 800, which is same as that of
Mask R-CNN, our method outperforms the single-model
state-of-the-art Mask R-CNN with nearly 3 points under the
same initial models.
Object Detection Results Similar to the way adopted
in Mask R-CNN, we also report bounding box results in-
ferred from the box branch. Table 2 shows that our method
with ResNet-50, trained and tested on single-scale images,
outperforms, by a large margin, all other single-model
ones even using much larger ResNeXt-101 [61] as initial
model. With multi-scale training and single-scale testing,
our PANet with ResNet-50 outperforms Champion in 2016,
which used larger model ensemble and testing tricks.
Component Ablation Studies First, we analyze impor-
tance of each proposed component. Besides bottom-up path
augmentation, adaptive feature pooling and fully-connected
fusion, we also analyze multi-scale training, multi-GPU
synchronized batch normalization [67, 28] and heavier
Method
Backbone
Table 2. Comparison among PANet, winner of COCO 2016 object detection challenge, RentinaNet and Mask R-CNN on COCO test-dev
subset in terms of box AP, where the latter three are baselines.
Table 3. Performance in terms of mask AP, box ap APbb of an independently trained object detector, and box ap APbbM of the box
branch trained with multi-task fashion on val-2017. Based on our re-implemented baseline (RBL), we gradually add multi-scale training
(MST), multi-GPU synchronized batch normalization (MBN), bottom-up path augmentation (BPA), adaptive feature pooling (AFP), fully-
connected fusion (FF) and heavier head (HHD) for ablation studies. MRB is short for Mask R-CNN result reported in the original paper.
The last line shows total improvement compared with baseline RBL.
head. For multi-scale training, we set longer edge to 1, 400
and the other to range from 400 to 1, 400. We calculate
mean and variance based on all samples in one batch across
all GPUs, do not ﬁx any parameters during training, and
make all new layers followed by a batch normalization
layer, when using multi-GPU synchronized batch normal-
ization. The heavier head uses 4 consecutive 3 × 3 convo-
lutional layers shared by box classiﬁcation and box regres-
sion, instead of two fc layers. It is similar to the head used in
[36] but the convolutional layers for box classiﬁcation and
box regression branches are not shared in their case.
Our ablation study from the baseline gradually to all
components incorporated is conducted on val-2017 subset
and is shown in Table 3. ResNet-50 [23] is our initial model.
We report performance in terms of mask AP, box ap APbb of
an independently trained object detector and box ap APbbM
of box branch trained in the multi-task fashion.
1) Re-implemented Baseline. Our re-implemented Mask
R-CNN performs comparable with the one described in
original paper and our object detector performs better.
2) Multi-scale Training & Multi-GPU Sync. BN. These
two techniques help the network to converge better and in-
crease the generalization ability.
3) Bottom-up Path Augmentation. With or without adap-
tive feature pooling, bottom-up path augmentation consis-
tently improves mask AP and box ap APbb by more than 0.6
and 0.9 respectively. The improvement on instances with
large scale is most signiﬁcant. This veriﬁes usefulness of
information from lower feature levels.
4) Adaptive Feature Pooling. With or without bottom-
up path augmentation, adaptive feature pooling consistently
improves performance. The performance in all scales gen-
erally improves, in accordance with our observation that
features in other layers are also useful in ﬁnal prediction.
5) Fully-connected Fusion. Fully-connected fusion aims
at predicting masks with better quality.
It yields 0.7 im-
provement in terms of mask AP. It is general for instances
at all scales.
6) Heavier Head. Heavier head is quite effective for box
ap APbbM of bounding boxes trained with multi-task fash-
ion. While for mask AP and independently trained object
detector, the improvement is minor.
With all these components in PANet, improvement on
mask AP is 4.4 over baselines. Box ap APbb of indepen-
dently trained object detector increases 4.2. They are signif-
icant. Small- and medium-size instances contribute most.
Half improvement is from multi-scale training and multi-
GPU sync. BN, which are effective strategies to help train
better models.
Ablation Studies on Adaptive Feature Pooling We con-
duct ablation studies on adaptive feature pooling to ﬁnd
where to place the fusion operation and the most appropri-
ate fusion operation. We place it either between ROIAlign
and fc1, represented by “fu.fc1fc2” or between fc1 and fc2,
represented by “fc1fu.fc2” in Table 4. Similar settings are
also applied to mask prediction branch. For feature fusing,
max and sum operations are tested.
Settings
baseline
fu.fc1fc2
fc1fu.fc2
MAX
SUM
Table 4. Ablation study on adaptive feature pooling on val-2017 in
terms of mask AP and box ap APbb of the independently trained
object detector.
Settings
baseline
conv2
conv3
conv4
PROD
SUM
MAX
Table 5. Ablation study on fully-connected fusion on val-2017 in
terms of mask AP.
As shown in Table 4, adaptive feature pooling is not sen-
sitive to the fusion operation. Allowing a parameter layer
to adapt feature grids from different levels, however, is of
great importance. We use max as fusion operation and use
it behind the ﬁrst parameter layer in our framework.
Ablation Studies on Fully-connected Fusion We inves-
tigate performance with different ways to instantiate the
augmented fc branch. We consider two aspects, i.e., the
layer to start the new branch and the way to fuse predictions
from the new branch and FCN. We experiment with creat-
ing new paths from conv2, conv3 and conv4, respectively.
“max”, “sum” and “product” operations are used for fusion.
We take our reimplemented Mask R-CNN with bottom-up
path augmentation and adaptive feature pooling as the base-
line. Corresponding results are shown in Table 5. They
clearly show that staring from conv3 and taking sum for
fusion produces the best results.
COCO 2017 Challenge With PANet, we participated in
the COCO 2017 Instance Segmentation and Object Detec-
tion Challenges. Our framework reaches the 1st place in In-
stance Segmentation task and the 2nd place in Object Detec-
tion task without large-batch training. As shown in Tables
6 and 7, compared with last year champions, we achieve
9.1% absolute and 24% relative improvement on instance
segmentation. While for object detection, 9.4% absolute
and 23% relative improvement is yielded.
The top performance comes with a few more details in
PANet. First, we use deformable convolutions where DCN
[11] is adopted. The common testing tricks [23, 33, 10,
15, 39, 62], such as multi-scale testing, horizontal ﬂip test-
ing, mask voting and box voting, are adopted. For multi-
scale testing, we set the longer edge to 1, 400 and the other
ranges from 600 to 1, 200 with step 200. Only 4 scales are
used. Second, we use larger initial models from publicly
+ensemble
Table 6. Mask AP of COCO Instance Segmentation Challenge in
different years on test-dev.
Table 7. Box AP of COCO Object Detection Challenge in different
years on test-dev.
available ones. We use 3 ResNeXt-101 (64 × 4d) [61], 2
SE-ResNeXt-101 (32 × 4d) [25], 1 ResNet-269 [64] and 1
SENet [25] as ensemble for bounding box and mask gener-
ation. Performance with different larger initial models are
similar. One ResNeXt-101 (64 × 4d) is used as the base
model to generate proposals. We train these models with
different random seeds, with and without balanced sam-
pling [55] to enhance diversity between models. Detection
results we submitted are acquired by tightening instance
masks. We show a few visual results in Figure 5 – most
of our predictions are with high quality.
4.3. Experiments on Cityscapes
Dataset and Metrics Cityscapes [7] contains street
scenes captured by car-mounted cameras. There are 2, 975
training images, 500 validation images and 1, 525 testing
images with ﬁne annotations. Another 20k images are with
coarse annotations, excluded for training. We report our
results on val and secret test subsets. 8 semantic classes
are annotated with instance masks. Each image is with size
1024 × 2048. We evaluate results based on AP and AP50.
Hyper-parameters We use the same set of hyper-
parameters as in Mask R-CNN [21] for fair comparison.
Speciﬁcally, we use images with shorter edge randomly
sampled from {800, 1024} for training and use images with
shorter edge 1024 for inference. No testing tricks or DCN
is used. We train our model for 18k iterations with learn-
ing rate 0.01 and another 6k iterations with learning rate
0.001. 8 images (1 image per GPU) are in one image batch.
ResNet-50 is taken as the initial model on this dataset.
Results and Ablation Study We compare with state-of-
the-arts on test subset in Table 8. Trained on “ﬁne-only”
data, our method outperforms Mask R-CNN with “ﬁne-
only” data by 5.6 points. It is even comparable with Mask
R-CNN pre-trained on COCO. By pre-training on COCO,
Figure 5. Images in each row are visual results of our model on COCO test-dev, Cityscapes test and MVD test, respectively.
SegNet
Table 8. Results on Cityscapes val subset, denoted as AP [val], and on Cityscapes test subset, denoted as AP.
Methods
our re-implement
PANet
Table 9. Ablation study results on Cityscapes val subset. Only ﬁne
annotations are used for training. MBN is short for multi-GPU
synchronized batch normalization.
Methods
PANet [test tricks]
PANet
we outperform Mask R-CNN with the same setting by 4.4
points. Visual results are shown in Figure 5.
Our ablation study to analyze the improvement on val
subset is given in Table 9. Based on our re-implemented
baseline, we add multi-GPU synchronized batch normaliza-
tion to help network converge better. It improves the accu-
racy by 1.5 points. With our full PANet, the performance is
further boosted by 1.9 points.
4.4. Experiments on MVD
MVD [45] is a relatively new and large-scale dataset for
instance segmentation. It provides 25, 000 images on street
scenes with ﬁne instance-level annotations for 37 semantic
classes. They are captured from several countries using dif-
ferent devices. The content and resolution vary greatly. We
train our model on train subset with ResNet-50 as initial
model and report performance on val and secret test subsets
in terms of AP and AP50.
We present our results in Table 10. Compared with
UCenter [40] – winner on this dataset in LSUN 2017 in-
stance segmentation challenge, our PANet with one ResNet-
50 tested on single-scale images already performs compa-
rably with the ensemble result with pre-training on COCO.
With multi-scale and horizontal ﬂip testing, which are also
adopted by UCenter, our method performs even better.
Qualitative results are illustrated in Figure 5.
5. Conclusion
We have presented our PANet for instance segmenta-
tion. We designed several simple and yet effective com-
ponents to enhance information propagation in representa-
tive pipelines. We pool features from all feature levels and
shorten the distance among lower and topmost feature lev-
els for reliable information passing. Complementary path is
augmented to enrich feature for each proposal. Impressive
results are produced. Our future work will be to extend our
method to video and RGBD data.
Acknowledgements
We would like to thank Yuanhao Zhu, Congliang Xu and
Qingping Fu in SenseTime for technical support.
Appendix
A. Training Details and Strategy of Generating
Anchors on Cityscapes and MVD.
On Cityscapes
B. Details on Implementing Multi-GPU Syn-
chronized Batch Normalization.
We implement multi-GPU batch normalization on Caffe
[29] and OpenMPI. Given n GPUs and training samples in
batch B, we ﬁrst split training samples evenly into n sub-
batches, each is denoted as bi, assigned to one GPU. On
each GPU, we calculate means µi based on samples in bi.
AllReduce operation is then applied to gather all µi across
all GPUs to get the mean µB of entire batch B. µB is broad-
cast to all GPUs. We then calculate temporary statistics on
each GPU independently and apply the AllReduce opera-
B is
tion to produce the variance σ2
also broadcast to all GPUs. As a result, each GPU has the
statistics calculated on all training samples in B. We then
perform normalization ym = γ xm−µB√
+ β as in [28] for
each training sample. In backward operations, AllReduce
operation is similarly applied to gather information from all
GPUs for gradient calculation.
lik. Multiscale combinatorial grouping. In CVPR, 2014. 2
[2] A. Arnab and P. H. Torr. Pixelwise instance segmentation
with a dynamically instantiated network. In CVPR, 2017. 2
[3] M. Bai and R. Urtasun. Deep watershed transform for in-
Figure 6. Illustration of adaptive feature pooling on box branch.
Deformable convolutional networks. In ICCV, 2017. 7
[28] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift. In
ICML, 2015. 5, 9
classiﬁcation with deep convolutional neural networks.
NIPS, 2012. 3
ImageNet
In
segmentation
task, UCenter winner
[55] L. Shen, Z. Lin, and Q. Huang. Relay backpropagation for
effective learning of deep convolutional neural networks. In
ECCV, 2016. 7
[57] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. In ICLR, 2014.
3
Smeulders. Selective search for object recognition.
2013. 2
[63] M. D. Zeiler and R. Fergus. Visualizing and understanding
[65] Z. Zhang, S. Fidler, and R. Urtasun. Instance-level segmen-
tation for autonomous driving with deep densely connected
MRFs. In CVPR, 2016. 2
