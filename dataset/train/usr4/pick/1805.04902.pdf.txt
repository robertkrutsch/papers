LMNet: Real-time Multiclass Object Detection
on CPU using 3D LiDAR
Kazuki Minemura1, Hengfui Liau1, Abraham Monrroy2 and Shinpei Kato3
{kazuki.minemura, heng.hui.liau}@intel.com, amonrroy@ertl.jp, shinpei@is.s.u-tokyo.ac.jp
Abstract— This paper describes an optimized single-stage
deep convolutional neural network to detect objects in urban
environments, using nothing more than point cloud data. This
feature enables our method to work regardless the time of
the day and the lighting conditions. The proposed network
structure employs dilated convolutions to gradually increase
the perceptive ﬁeld as depth increases, this helps to reduce the
computation time by about 30%. The network input consists of
ﬁve perspective representations of the unorganized point cloud
data. The network outputs an objectness map and the bounding
box offset values for each point. Our experiments showed that
using reﬂection, range, and the position on each of the three axes
helped to improve the location and orientation of the output
bounding box. We carried out quantitative evaluations with
the help of the KITTI dataset evaluation server. It achieved the
fastest processing speed among the other contenders, making it
suitable for real-time applications. We implemented and tested
it on a real vehicle with a Velodyne HDL-64 mounted on top of
it. We achieved execution times as fast as 50 FPS using desktop
GPUs, and up to 10 FPS on a single Intel Core i5 CPU. The
deploy implementation is open-sourced and it can be found as a
feature branch inside the autonomous driving framework Au-
toware. Code is available at: https://github.com/CPFL/
Autoware/tree/feature/cnn_lidar_detection
I. INTRODUCTION
Automated driving can bring signiﬁcant beneﬁts to human
society. It can ameliorate accidents on the road, provide mo-
bility to persons with reduced capacities, automate delivery
services, help the elderly to safely move between places,
among many others.
Deep Learning has been applied successfully to detect
objects with great accuracy on point cloud. Previous work
on this area, used similar techniques taken from the work
on Convolutional Neural Networks for object detection on
images (e.g., 3D-SSMFCNN [1]), and extended its use on
point cloud projections. To name some: F-pointNet [2],
VoxelNet [3], AVOD [4], DoBEM [5], MV3D [6], among
others. However, none of these are capable to perform
on real-time scenarios. These approaches will be examined
further in Section II.
Knowing that point cloud can be treated as an image
(if projecting it to a 2D plane) and exploit the powerful
deep learning techniques from CNNs to detect objects on it,
we propose a 3D LiDAR-based multi-class object detection
1 Kazuki Minemura and Hengfui Liau are with Intel’s Internet of Things
2 Abraham Monrroy is with Nagoya University, Parallel and Distributed
3 Shinpei Kato is Associate Professor at the School of Science for The
network (LMNet). Our network aims to achieve real-time
performance, so it can be applied to automated driving
systems. In contrast to other approaches, such as MV3D,
which uses multiple inputs: Top and Frontal projections, and
RGB data taken from a camera. Ours adopts a single-stage
strategy from a single point cloud. LMNet also employs a
custom designed layer for dilated convolutions. This extends
the perception regions, conducts pixel-wise segmentation and
ﬁne-tunes 3D bounding box prediction. Furthermore, com-
bining it with a dropout strategy [7] and data augmentation,
our approach shows signiﬁcant
improvements in runtime
and accuracy. The network can perform oriented 3D box
regression, to predict location, size and orientation of objects
in 3D space.
The main contributions of this work are:
• To design a CNN capable to achieve real-time like 3D
multi-class object detection using only point cloud data
on real-time on CPU.
• To implement, test our work in a real vehicle.
• To enable multi-class object detection in the same net-
work (Vehicle, Pedestrian, Bike or Bicycle, as deﬁned
in the KITTI dataset).
• To open-source the pre-trained models and inference
As for the evaluation of the 3D Object detection, we use
the KITTI dataset [8] evaluation server to submit and get
a fair comparison. Experimental results suggest that LMNet
can detect multi-class objects with certain accuracy for each
category while achieving up to 50 FPS on GPU. Performing
better than those of DoBEM and 3D-SSMFCNN.
The structure of this paper is as follows: Section II in-
troduces the state-of-the-art architectures. Section III details
the input encoding and the LMNet. Section IV describes
the network outputs, compares with other state-of-the-art
architectures, and shows the tests on a real vehicle. Finally,
we summarize and conclude in the Section V.
II. RELATED WORK
Previous research has focused primarily on improving
the accuracy of the object detection. Thanks to this, great
progress has been made in this ﬁeld. However, these ap-
proaches leave performance out of the scope. In this section,
we present our ﬁndings on the current literature and analyze
how to improve performance.
While surveying current work in this ﬁeld, we found out
that object detection on LiDAR data can be classiﬁed into
three main different methods to handle the point cloud: a)
TABLE I
IMPLEMENTED DILATED LAYERS
Layer
Kernel size
Dilation
Receptive ﬁled
Feature channels
Activation function
direct manipulation of raw 3D coordinates, b) point cloud
projection and application of Fully Convolutional Networks,
and c) Augmentation of the perceptive ﬁelds from previous
approach using dilated convolutions.
A. Manipulation of 3D coordinates
Within this class, we can ﬁnd noteworthy mentions:
PointNet [9], PointNet++ [10] , F-PointNet [2], VoxelNet,
VeloFCN [11], and MV3D. Being PointNet the pioneer on
this group and can be further classiﬁed into three sub-groups.
The ﬁrst group is composed of PointNet and its variants.
These methods extract point-wise features from raw point
cloud data. Pointnet++ was developed on top of PointNet to
handle object scaling. Both PointNet and PointNet++ have
shown to work reliably well in indoor environments. More
recently, F-Pointnet was developed to enable road object
detection in urban driving environments. This method relies
on an independent image-based object detector to generate
high-quality object proposals. The point cloud within the
proposal boxes is extracted and fed onto the point-wise
based object detector, this helps to improve detection results
on ideal scenarios. However, F-PointNet uses two different
input sources, cannot be trained in an end-to-end manner,
requiring the image based proposal generator to be inde-
pendently trained. Additionally, this approach showed poor
performance when image data from low-light environments
were used to get the proposals, making it difﬁcult to deploy
on real application scenarios.
The second group of methods is Voxel based. VoxelNet [3]
divides the point cloud scene into ﬁxed size 3D Voxel grids.
A noticeable feature is that VoxelNet directly extracts the
features from the raw point cloud in the 3D voxel grid. This
method scored remarkably well in the KITTI benchmark.
Finally, the last group of popular approaches is 2D based
methods. VeloFCN was the ﬁrst one to project the point cloud
to an image plane coordinate system. Exploiting the lessons
learned from the image based CNN methods, it trained the
network using the well-known VGG16 [12] architecture from
Oxford. On top this feature layers, it added a second branch
to the network to regress the bounding box locations. MV3D,
an extended version of VeloFCN,
introduced multi-view
representations for point cloud by incorporating features
from bird and frontal-views.
Generally speaking, 2D based methods have shown to be
faster than those that work directly on 3D space. With speed
in mind, and due to the constraint we previously set of using
nothing more than LiDAR data, we decided to implement
LMNet as a 2D based method. This not only allows LMNet
to perform faster, but it also enables it to work on low-light
scenarios, since it is not using RGB data.
B. Fully Convolutional Networks
FCN have demonstrated state-of-the-art results in several
semantic segmentation benchmarks (e.g., PASCAL VOC,
MSCOCO, etc.), and object detection benchmarks (e.g.,
KITTI, etc.). The key idea of many of these methods is
to use feature maps from pre-trained networks (e.g., VG-
GNet) to form a feature extractor. SegNet [13] initially
proposed an encoder-decoder architecture for semantic seg-
mentation. During the encoding stage, the feature map is
down-sampled and later up-sampled using an unpooling
layer [13]. DeepLabV1 [14] increases the receptive ﬁeld at
each layer using dilated convolution ﬁlter.
In this work, the 3D point cloud is represented as a plane
that extracts the shape and depth information. Using this pro-
cedure, an FCN can be trained from scratch using the KITTI
dataset data or its derivatives (e.g., data augmentation). This
also enables us to design a custom network, and be more
ﬂexible while addressing the segmentation problem at hand.
For instance, we can integrate a similar encoder-decoder
technique as the one described in SegNet. More speciﬁcally,
LMNet is designed to have larger perceptive ﬁelds, quickly
process larger resolution feature maps, and simultaneously
validate the segmentation accuracy [15].
C. Dilated convolution
Traditional convolution ﬁlter limits the perceptive ﬁeld to
uniform kernel sizes (e.g., 3 × 3, 5 × 5, etc). An efﬁcient
approach to expanding the receptive ﬁeld, while keeping the
number of parameters and layers small, is to employ the
dilated convolution. This technique enables an exponential
expansion of the receptive ﬁeld while maintaining resolu-
tion [16], [17] (e.g., the feature map size can be as big
same as the input size). For this to work effectively, it is
important to restrict the number of layers to reduce the FCN’s
memory requirements. This is especially true when working
with higher resolution feature maps. Dilated convolutions
are widely used in semantic segmentation on images. To
the best of our knowledge, LMNet is the ﬁrst network that
uses dilated convolution ﬁlter on point cloud data to detects
objects.
Table I shows the implemented dilated layers in LMNet.
The dilated convolution layer is larger than the input features
maps, which have a size of 64 × 512 pixels. This allows
the FCN to access a larger context window to refer road
objects. For each dilated convolution layer, a dropout layer
TABLE II
SUMMARY OF NETWORK ARCHITECTURES WITH INPUT DATA,
DETECTION TYPE, SOURCE CODE AVAILABILITY AND INFERENCE TIME.
Network
Lidar
Input Data
Class
Image and Lidar multi
multi
Image and Lidar multi
car
Image and Lidar
car
Image and Lidar
car
Image
Fig. 1. LMNet architecture
is added between convolution and ReLU layers to regularize
the network and avoid over-ﬁtting.
D. Comparison
As this work aims to design a fast 3D multi-class object
detection network, we mainly compare with other previously
published 3D object detection networks: F-pointNet, Voxel-
Net, AVOD, MV3D, DoBEM, and 3D-SSMFCNN.
To have a basic overview of the previously mentioned
networks, Table II lists the items: (a) Data, which is what
data feed in to the network; (b) type, which is detection
availability (i.e. multi-class, car only); (c) Code, which is
code availability, and; (d) Inference, which is the time taken
to forward the input data and generate outputs.
Although, some of state-of-the-art network source code
(viz., F-pointNet, AVOD) are available, the models reported
to Kitti are not available. We can only infer that by the type
of data being fed, the outlined accuracy, and the manually
reported inference time. Additionally, none of them are
capable to be processed in real-time (more than 30 FPS) [19].
A third party, Boston Didi team, implemented the MV3D
model [18]. This method can only perform single class
detection and would not be suitable to perform a comparison.
Furthermore, the reported inference performance is less than
3 FPS. For the previous reasons, we ﬁrmly believe that open
sourcing a fast object detection method and its corresponding
inference code can greatly contribute to the development of
faster and highly accurate detectors in the automated driving
community.
III. PROPOSED ARCHITECTURE
The proposed network architecture takes as input ﬁve
representations of the frontal-view projection of a 3D point
cloud. These ﬁve input maps help the network to keep 3D
information at hand. The architecture outputs an objectness
map and 3D bounding box offset values calculated directly
from the frontal-view map. The objectness map contains
(a) Reﬂection
Fig. 2. Encoded input point cloud
the class conﬁdence values for each of the projected 3D
points. The box candidates calculated from the offset values
are ﬁltered using a custom euclidean distance based non-
maximum suppression procedure. A diagram of the proposed
network architecture can be visualized in Fig. 1.
Albeit frontal-view representations [20] have less informa-
tion than bird-view [6], [16] representations or raw-point [9],
[10] data. We can expect less computational cost and certain
detection accuracy [21].
A. Frontal-view representation
To obtain a sparse 2D point map, we employ a cylindrical
projection [20]. Given a 3D point p = (x,y,z). Its correspond-
ing coordinates in the frontal-view map p f = (r,c) can be
calculated as follows:
Using this projection, ﬁve feature channels are generated:
1) Reﬂection, which is the normalized value of the reﬂec-
tivity as returned by the laser for each point.
2) Range, which is the distance on the XY plane (or the
ground) of the sensor coordinate system. It can be
3) The distance to the front of the car. Equivalent to the
x coordinate on the LiDAR frame.
4) Side, the y coordinate value on the sensor coordinate
system. Positive values represent a distance to the left,
while negative ones depict points located to the right
of the vehicle.
5) Height, as measured from the sensor location. Equal
B. Bounding Box Encoding
As for the bounding boxes, we follow the encoding
approach from [20], which considers the offset of corner
points and its rotation matrix. There are two reasons on why
to use this approach as shown in Ref [20]: (A) A faster CNN
convergence due to the reduced offset distribution leading to
a smaller regression search space, and (B) Enable rotation
invariance. We brieﬂy describe the encoding in this section.
Assuming a LiDAR point p = (x,y,z) ∈ P, an object point
and a background point can be represented as p ∈ O, p ∈ Oc,
respectively. The box encoding considers the points forming
the objects, e.g., p ∈ O. The observation angles (e.g., azimuth
and elevation) are calculated as follows:
Therefore, the rotation matrix R can be deﬁned as follows,
where Rz(θ ) and Ry(φ ) are the rotation functions around the
z and y axes, respectively. Then, the i-th bounding box corner
cp,i = (xc,i,yc,i,zc,i) can be encoded as:
c(cid:48)
p,i = RT (cp,i − p).
Our proposed architecture regress c(cid:48)
p during training. The
eight corners of a bounding box are concatenated in a 24-d
vector as,
Thus, the bounding box output map has 24 channels with
the same resolution as the input one.
C. Proposed Architecture
The proposed CNN architecture is similar to LoDNN [16].
As illustrated in Fig. 1, the CNN feature map is processed by
two 3×3 convolution, eight dilated convolution and followed
by 3×3 and 1×1 convolution layers. The trunk splits at the
max-pooling layer into the objectness classiﬁcation branch
and the bounding box’s corners offset regression branch.
We use (d)conv(cin,cout ,k) to represent a 2-dimensional
convolution/dilated-convolution operator where cin is the
number of input channel, and cout is the number of output
channels, k represent the kernel size, respectively.
A ﬁve-channel map of size of 64× 512× 5, as described
in Section 2, are fed into an encoder with two convolution
layers, conv(5,64,3) and conv(64,64,3). These are followed
by a max-pooling layer to the output of the encoder, this
helps to reduce FCN’s memory requirements as previously
mentioned.
The encoder section is succeeded by seven dilated-
convolutions [17] (see dilation parameters in Table I ) and a
convolution, e.g., dconv1(64,128,3); dconv2−7(128,128,3);
and conv(128,64,1), with a dropout layer and a rectiﬁed
linear unit (ReLU) activation applied to the pooled feature
map, enabling the layer to extract multi-scale contextual
information.
Following the context module, the main trunk bifurcates
to create the objectness and corners branches. Both of them
have a decoder that up-samples the feature map, from the
dilated convolutions to the same size as the input. This
is achieved with the help of a max-unpooling layer [13],
followed by two convolution layers: conv(64,64,3) with
ReLU, and; conv(64,4,3) with ReLU for objectness branch,
or conv(64,24,3) for corners branch.
The objectness branch outputs an object conﬁdence map,
while the corners-branch generates the corner-points offsets.
Softmax loss is employed to calculate the objectness loss
between the conﬁdence map and the encoded objectness
map. Finally, Smooth l1 [23] is utilized for the corner offset
regression loss between the corners offset and ground truth
corners offset.
To train a multi-task network, a re-weighting approach is
employed as explained in Ref [20] to balance the objective
of learning both objectness map and bounding box’s offset
values. The multi-task function L can be deﬁned as follows:
where Lob j and Lcor denote the softmax loss and regression
loss of point p, respectively, while wob j and wcor are point-
wise weights, e.g., objectness weight and corners weight,
calculated by the following equations:
(11)
is the average shape size of the class x ∈
where ¯s[x]
{car, pedestrian, cyclist}, κp denotes point p class, s(p) rep-
resents the size of an object which the point p belongs to, |O|
denotes the number of points on all objects, |Oc| denotes the
number of points on the background. In a point cloud scene,
most of the points are corresponding to the background. A
constant weight, m, is introduced to balances the softmax
losses between the foreground and the background object.
Empirically, m is set to 4.
D. Training Phase
The KITTI dataset only has annotations for objects in
the frontal-view on the camera image. Thus, we limit point
cloud range in [0,70]×[−40,40]×[−2,2] meters, and ignore
the points in out of image boundaries after projection (see
Section III-A). Since KITTI uses the Velodyne HDL64E, we
obtain a 64× 512 map for the frontal-view maps.
The
proposed
architecture
implemented
using
Caffe [24], while adding the custom unpooling layers
implementations. The network is trained in an end-to-end
manner using stochastic gradient decent (SGD) algorithm
with a learning rate of 10−6 for 200 epoch for our dataset.
The batch size is set to 4.
TABLE III
PERFORMANCE BOARD
TABLE IV
INFERENCE TIME ON CPU
Newtwork
Proposed
Titan X
Titan Xp
Titan X
Titan X
Titan X
Titan X
Inference
E. Data augmentation
The number of point cloud samples in the KITTI training
dataset is 7481, which is considerably less than other image
datasets (e.g., ILSVRC [25], has 456567 images for training).
Therefore, data augmentation technique is applied to avoid
overﬁtting, and to improve the generalization of our model.
Each point cloud cluster that is corresponding to an object
class was randomly rotating at LiDAR z-axis [−15◦,15◦].
Using the proposed data augmentation,
the training set
dramatically increased to more than 20000 data samples.
F. Testing Phase
The objectness map includes a non-object class and the
corner map may output many corner offsets. Consider the
corresponding corner points {cp,i|i ∈ 1, ...8} by the inverse
transform of Eq. 6. Each bounding box candidates can be
denoted by bp = (cT
p,8)T . The sets of all box
candidates is B = {bp|p ∈ ob j}.
To reduce bounding boxes redundancy, we apply a mod-
iﬁed non-maximum suppression (NMS) algorithm, which
selects the bounding box based on the euclidean distance
between the front-top-left and rear-bottom-right corner points
of the box candidates. Each box bp is scored by count-
ing its neighbor bounding boxes in B within distance
δcar,δpedestrian,δcyclist, denoted as #{||cpi,1−cp j,1|| +||cpi,8−
cp j,8|| < δclass}. Then, the bounding boxes B are sorted by
descending score. Afterwards, the bounding box candidates
whose score is less than ﬁve are discarded as outliers. Picking
up a box who has the highest score in B, the euclidean
distances between the box and the rest are calculated. Finally,
the boxes whose distance are less than the predeﬁned thresh-
old values are removed. The empirically obtained thresholds
for each class are: (a) Tcar = 0.7m; (b) Tpedestrian = 0.3m,
and; (c) Tcyclist = 0.3m.
IV. EXPERIMENTS
The evaluation results of LMNet on the challenging KITTI
object detection benchmark [8] are shown in this section. The
benchmark provides image and point cloud data, 7481 sets
for training and 7518 sets for testing. LMNet is evaluated on
KITTI’s 2D, 3D and bird view object detection benchmark
using online evaluation server.
A. Inference Time
One of the major issue for the application of a 3D
object detection network is inference time. We compare the
inference time taken by LMNet and some representative
Caffe version
Caffe with OpenBlas
(a) Ground truth label
(b) Segmented map
Fig. 3. Ground truth label and segmented map
state-of-art networks. Table III shows inference time on
CUDA enabled GPUs of LMNet and other representatives
methods. LMNet achieved the fastest inference at 20ms on
a GTX 1080. Further tests on a Titan Xp observed inference
time of 12ms, and 6.8ms (147 FPS) for Tesla P40. LMNet
is the fastest in the wild and enables real-time (30 FPS or
better) [19] detection.
B. Towards Real-Time Detection on General Purpose CPU
To test the inference time on CPU, LMNet is using Intel
Caffe [26], which is optimized for Intel architecture CPUs
through Intel’s math kernel library (MKL). For the execution
measurements, we include not only the inference time but
also the time required to pre-process, project and generate
the input data from the point cloud, as well as the post-
processing time used to generate the objectness map and
bounding box coordinates. Table IV shows that LMNet can
achieve more than 10 FPS on an Intel CPU i5-6600K (4
cores, 3.5 GHz) and 20 FPS on Xeon E5-2698 v4 (20
cores, 2.2 GHz). Given that the Lidar scanning frequency
is 10 Hz, the 10 FPS achieved by LMNet is considered as
real-time. These results are promising for automated driving
systems that only use general purpose CPU. LMNet could
be deployed to edge devices.
C. Project Map Segmentation
Based on our observations,
the trained model at 200
epochs is used for performance evaluation. The obtained
segmented map and its corresponding ground truth label from
the validation set can be appreciated in Fig. 3. The segmented
object conﬁdence map is very similar to the ground truth.
Experiment result shows that LMNet can accurately classify
points by its class.
D. Object Detection
The evaluation of LMNet was carried out on the KITTI
dataset evaluation server. Particularly, multi-class object de-
tection on 2D, 3D and BV categories. Table. III shows the
average precision on 3D object detection in the moderate
setting. LMNet performed a certain 3D detection accuracies,
15.24% for car, 11.46% for pedestrian and 3.23% for cyclist,
respectively. The state-of-art networks achieve more than
50% accuracy for car, 20% for the pedestrian and 29%.
Fig. 4.
3D point cloud classiﬁed by LMNet from a Velodyne HDL-64E
MV3D achieved 52% accuracy for car objects. However,
those networks are either not executed in real-time, only sin-
gle class, or not open-sourced as mentioned in the Section II-
D. To our best knowledge, LMNet is the fastest multi-class
object detection network using data only from LiDAR, with
models and code open sourced.
E. Test on real-world data
We implemented LMNet as an Autoware [27] module.
Autoware is an autonomous driving framework for urban
roads. It includes sensing, localization, fusion and perception
modules. We decided to use this framework due to the
easiness of installation, its compatibility with ROS [28] and
because it is open-source, allowing us to focus only on the
implementation of our method. The sensing module allowed
us to connect with a Velodyne HDL-64E LiDAR, the same
model as the one used in the KITTI dataset. With the help
of the ROS, PCL and OpenCV libraries, we projected the
sensor point cloud, constructed the ﬁve-channel input map as
described in III-A, fed them to our Caffe fork and obtained
both the output maps. Fig. 4 shows the classiﬁed 3D point
cloud.
V. CONCLUSIONS
This paper introduces LMNet, a multi-class, real-time
network architecture for 3D object detection on point cloud.
Experimental results show that it can achieve real-time per-
formance on consumer grade CPUs. The predicted bounding
boxes are evaluated on KITTI evaluation server. Although the
accuracy is on par with other state-of-the-art architectures,
LMNet is signiﬁcantly faster and able to detect multi-class
road objects. The implementation and pre-trained models are
open-sourced, so anyone can easily test our claims. Training
code is also planned to be open sourced. It is important
to note that all the evaluations are using the bounding box
location, as deﬁned by the KITTI dataset. However, this does
not correctly reﬂect the classiﬁer accuracy at a point-wise
level. As for future work, we intend to ﬁne-tune the bounding
box non-maximum suppression algorithm to perform better
on the KITTI evaluation; Implement the network on low-
power platforms such as the Intel Movidius’s Myriad [29]
and Atom, to test its capability on a wider range of IoT or
embedded solutions.
REFERENCES
[1] L. Novak, “Vehicle detection and pose estimation for autonomous
[5] S.-l. Yu, T. Westfechtel, R. Hamada, K. Ohno, and S. Tadokoro,
“Vehicle detection and localization on bird’s eye view elevation images
using convolutional neural network,” in IEEE International Symposium
on Safety, Security and Rescue Robotics, oct 2017, pp. 102–109.
[8] A. Geiger, P. Lenz, and R. Urtasun, “Are we ready for autonomous
driving? the kitti vision benchmark suite,” in Conference on Computer
Vision and Pattern Recognition, 2012.
[11] B. Li, T. Zhang, and T. Xia, “Vehicle detection from 3D lidar
using fully convolutional network,” in Robotics: Science and Systems.
Robotics: Science and Systems Foundation, 2016.
[12] S. Karen and Z. Andrew, “Very deep convolutional networks for large-
[14] L.-C. Chen, G. Papandreou, I. Kokkinos, K. Murphy, and A. L. Yuille,
“DeepLab: semantic image segmentation with deep convolutional nets,
atrous convolution, and fully connected CRFs,” IEEE Transactions on
Pattern Analysis and Machine Intelligence, pp. 1–1, 2017.
[16] L. Caltagirone, S. Scheidegger, L. Svensson, and M. Wahde, “Fast
lidar-based road detection using fully convolutional neural networks,”
in IEEE Intelligent Vehicles Symposium, jun 2017, pp. 1019–1024.
[17] F. Yu and V. Koltun, “Multi-scale context aggregation by dilated
[Online]. Available:
bostondiditeam/MV3D
[Online]. Available: http:
//velodynelidar.com/hdl-64e.html
[23] R. Girshick, “Fast R-CNN,” in IEEE International Conference on
